import random
import re
from aiogram import Router, types
from aiogram.dispatcher.filters.callback_data import CallbackData
from aiogram.dispatcher.filters.text import Text
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot import bot
from utils import StaticMedia, get_pagination_list, phraze_list
from keyboards import reply_keyboard_stickers_builder

static_media = StaticMedia(stickers_url="static/stickers_tlgrm.files", calendar_url='calendar.files')


class FSMStickersRandom(StatesGroup):
    count = State()


class FSMStickersSearch(StatesGroup):
    word = State()
    count = State()


class StickersPaginateCallback(CallbackData, prefix="my"):
    start: int
    end: int
    page: int


# stickers_paginate_callback = CallbackData('action', 'start_end')

router = Router()


@router.message(text="–°—Ç–∏–∫–µ—Ä—ã")
async def stickers_menu_show_handler(message: Message):
    # await bot.send_message(message.from_user.id,
    #                        "–ë–æ–ª–µ–µ 10000 –æ—Ç–∫—Ä—ã—Ç–æ–∫ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏!!!",
    #                        reply_markup=InlineKeyboardMarkup(row_width=2).row(
    #                            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="holiday__today_"),
    #                            InlineKeyboardButton(text="–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="holiday__calendar_")))
    # await message.delete_reply_markup()
    await message.answer("–ë–æ–ª–µ–µ 25000 —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–æ–≤!!! –ù–∞–π—Ç–∏ –±—ã —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π((",
                         reply_markup=reply_keyboard_stickers_builder.as_markup(resize_keyboard=True))


@router.message(text="–°–ª—É—á–∞–π–Ω—ã–µ –ø–∞–∫–∏", state=None)
async def stickers_random_handler(message: Message, state: FSMContext):
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–∞–∫–æ–≤ –Ω–∞–π—Ç–∏?")
    await state.set_state(FSMStickersRandom.count)


@router.message(text="–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º", state=None)
async def stickers_search_handler(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (ru/en)...")
    await state.set_state(FSMStickersSearch.word)


@router.message(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
async def show_all_stickers_handler(message: Message):
    stickers_dict = static_media.get_stickers_dict()
    stickers_titles = list(stickers_dict.keys())
    stickers_titles_inline_builder = InlineKeyboardBuilder()

    paginate_inline_kb_builder = InlineKeyboardBuilder()

    paginate_list = get_pagination_list(len(stickers_titles))
    for num, page in enumerate(paginate_list):
        activ = "üëâ" if num == 1 else ""
        paginate_inline_kb_builder.add(InlineKeyboardButton(text=f'{activ}{num}',
                                                            callback_data=StickersPaginateCallback(
                                                                start=page[0],
                                                                end=page[1],
                                                                page=num).pack()))

    paginate_inline_kb_builder.adjust(8)

    for x in range(0, 99):
        stickers_titles_inline_builder.add(
            InlineKeyboardButton(text=f"{stickers_titles[x]}", url=f'{stickers_dict[stickers_titles[x]]["url"]}'))
    stickers_titles_inline_builder.adjust(3)
    await message.answer(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ - {len(stickers_dict.keys())}. –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ 100 —à—Ç.",
                         reply_markup=stickers_titles_inline_builder.as_markup(resize_keyboard=True))

    await bot.send_message(message.from_user.id,
                           "–∏ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü...",
                           reply_markup=paginate_inline_kb_builder.as_markup(resize_keyboard=True))

    # global stickers_names_gen
    # for x in range(0, 50):
    #     name = next(stickers_names_gen)
    #     all_names_inline_menu.clean()
    #     all_names_inline_menu.add(InlineKeyboardButton(f'{name}', url=f'{stickers_dict[name]["url"]}'))
    #
    # await bot.send_message(message.from_user.id, f"–í—Å–µ–≥–æ {len(stickers_dict.keys())} –ø–∞–∫–æ–≤. –û—Ç–ø—Ä–∞–≤–∏–ª –ø–µ—Ä–≤—ã–µ 50 —à—Ç...",
    #                        reply_markup=all_names_inline_menu)
    # await bot.send_message(message.from_user.id, "{–•–≤–∞—Ç–∏—Ç?}",
    #                        reply_markup=InlineKeyboardMarkup(row_width=2)
    #                        .row(InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", callback_data="all_stick__yet"),
    #                             InlineKeyboardButton("–ù–∞–¥–æ–µ–ª–æ", callback_data="all_stick__enough")))
    #


@router.callback_query(StickersPaginateCallback.filter())
async def all_stickers_pagination_callback_handler(callback: types.CallbackQuery,
                                                   callback_data: StickersPaginateCallback):
    stickers_dict = static_media.get_stickers_dict()
    stickers_titles = list(stickers_dict.keys())

    stickers_titles_inline_builder = InlineKeyboardBuilder()

    for x in range(callback_data.start, callback_data.end):
        stickers_titles_inline_builder.add(
            InlineKeyboardButton(text=f"{stickers_titles[x]}", url=f'{stickers_dict[stickers_titles[x]]["url"]}'))
    stickers_titles_inline_builder.adjust(3)
    await callback.message.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ - {callback_data.page}",
                                  reply_markup=stickers_titles_inline_builder.as_markup(resize_keyboard=True))

    paginate_inline_kb_builder = InlineKeyboardBuilder()
    paginate_list = get_pagination_list(len(stickers_titles))
    for num, page in enumerate(paginate_list):
        activ = "üëâ" if num == callback_data.page else ""
        paginate_inline_kb_builder.add(InlineKeyboardButton(text=f'{activ}{num}',
                                                            callback_data=StickersPaginateCallback(
                                                                start=page[0],
                                                                end=page[1],
                                                                page=num).pack()))
    paginate_inline_kb_builder.adjust(8)
    await bot.send_message(callback.message.chat.id, "...",
                           reply_markup=paginate_inline_kb_builder.as_markup(resize_keyboard=True))

    await callback.answer()


@router.message(FSMStickersSearch.word)
async def load_word_search_stickers(message: Message, state: FSMContext):
    stickers_dict = static_media.get_stickers_dict()
    stickers_titles = stickers_dict.keys()
    await state.update_data(word=message.text)
    data = await state.get_data()

    matches_list = list(filter(lambda x: data['word'] in x, stickers_titles))
    # await bot.send_message(message.from_user.id, f'{matches_list}')
    # for x in stickers_names:
    #     await bot.send_message(message.from_user.id, f'{x}')

    if len(matches_list) > 0:
        for name in matches_list:
            bold_name = name[:name.index(data['word'])] + \
                        "<b>" + data['word'].upper() + "</b>" \
                        + name[name.index(data['word'])
                               + len(data['word']):]

            # media = types.MediaGroup()
            media = list()
            img_list = stickers_dict[name]["stickers"]

            if len(img_list) <= 4:
                for img in img_list:
                    media.append(types.InputMediaPhoto(type='photo', media=img))
            else:
                for x in range(0, 3):
                    media.append(types.InputMediaPhoto(type='photo', media=img_list[x]))
            try:
                if len(media) > 0:
                    print(f'–ú–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ - {len(media)} ')

                    await bot.send_media_group(message.from_user.id, media=media)

                    builder = InlineKeyboardBuilder()
                    builder.row(InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–π / –î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º",
                                                     url=f'{stickers_dict[name]["url"]}'))

                    await bot.send_message(message.from_user.id, f'{bold_name}',
                                           parse_mode="HTML",
                                           reply_markup=builder.as_markup(resize_keyboard=True))
            except Exception as ee:
                await bot.send_message(message.from_user.id,
                                       "<em>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞—à–µ–ª –∫–∞–∫—É—é-—Ç–æ —á–µ–ø—É—Ö—É, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –±—É–¥—É...</em>",
                                       parse_mode="HTML")
                print(f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ {ee}")
                with open("static/bad_pack1.txt", 'a') as file:
                    file.write(name)
    else:
        await bot.send_message(message.from_user.id, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    await state.clear()


@router.message(FSMStickersRandom.count)
async def load_count_random_stickers(message: Message, state: FSMContext):
    num_string = message.text
    if not (num_string.isnumeric() and num_string.isdigit() and re.match("[-+]?\d+$", num_string)):
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
    else:
        stickers_list = static_media.get_stickers_list()
        packs_count = int(num_string)
        await state.update_data(count=packs_count)

        count = 0
        await message.answer(f'–û–∫, —Ä–∞–±–æ—Ç–∞—é...')
        while count < packs_count:
            random_sticker_dict = random.choice(stickers_list)
            img_list = random_sticker_dict["stickers"]

            # media = types.MediaGroup()
            media = list()
            if len(img_list) <= 6:
                for img in img_list:
                    media.append(types.InputMediaPhoto(type='photo', media=img))
            else:
                for x in range(0, 5):
                    media.append(types.InputMediaPhoto(type='photo', media=img_list[x]))

            try:
                if len(media) > 0:
                    await bot.send_message(message.from_user.id, f'<em>{random.choice(phraze_list)}</em>',
                                           parse_mode="HTML")

                    await bot.send_media_group(message.from_user.id, media=media)

                    builder = InlineKeyboardBuilder()
                    builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º", url=f'{random_sticker_dict["url"]}'))
                    await bot.send_message(message.from_user.id,
                                           f'–°—Ç–∏–∫–µ—Ä—ã <b>"{random_sticker_dict["name"]}"</b>',
                                           parse_mode="HTML",
                                           reply_markup=builder.as_markup(resize_keyboard=True))
                    count = count + 1
            except Exception as ee:
                await bot.send_message(message.from_user.id,
                                       "<em>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞—à–µ–ª –∫–∞–∫—É—é-—Ç–æ —á–µ–ø—É—Ö—É, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –±—É–¥—É...</em>",
                                       parse_mode="HTML")
                print(f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –ø–∞–∫–∞—Ö --- {ee}")
                with open("static/bad_pack.txt", 'a') as file:
                    file.write(random_sticker_dict["name"])
        # await bot.send_message(message.from_user.id, "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

        await state.clear()
