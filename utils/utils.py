from aiogram.dispatcher.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder

from create_bot import stickers_list
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

phraze_list = ["–°–µ–∫—É–Ω–¥–æ—á–∫—É, —Å–∫–ª–µ–∏–≤–∞—é —Ñ–æ—Ç–∫–∏...", "–º–∏–Ω—É—Ç–∫—É, –∏—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞—Ö...)", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–±–∏—Ä–∞—é –ø–∞–∑–ª...",
               "–ù–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –≤—Å–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω–∞–¥–æ –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å...", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ,–≤—ã–≥—Ä—É–∂–∞—é –ø–æ —á–∞—Å—Ç—è–º...",
               "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–ø–æ–∑–∂–µ, —É—Å—Ç–∞–ª, —É –º–µ–Ω—è –ø–µ—Ä–µ—Ä—ã–≤...", "–ú–∏–Ω—É—Ç–∫—É –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —è —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é –≤–∞—à–∏ –¥–∏—Å–∫–∏))"]


# def get_stickers(count: int, massage: types.Message, img_list: list):
#     media = types.MediaGroup()
#     if len(img_list) <= 6:
#         for img in img_list:
#             media.attach_photo(types.InputMediaPhoto(img))
#     else:
#         for x in range(0, 5):
#             media.attach_photo(types.InputMediaPhoto(img_list[x]))
#
#     try:
#         if len(media.media) > 0:
#             print(f'–ú–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ - {len(media.media)} ')
#
#             await bot.send_message(message.from_user.id, f'<em>{random.choice(phraze_list)}</em>',
#                                    parse_mode="HTML")
#
#             await bot.send_media_group(message.from_user.id, media=media)
#             await bot.send_message(message.from_user.id, f'–°—Ç–∏–∫–µ—Ä—ã <b>"{random_sticker_dict["name"]}"</b>',
#                                    parse_mode="HTML",
#                                    reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(
#                                        text="–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º", url=f'{random_sticker_dict["url"]}')))
#             count = count + 1
#     except Exception as ee:
#         print(f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ {ee}")
#         with open("static/bad_pack.txt", 'a') as file:
#             file.write(random_sticker_dict["name"])
#

# await bot.send_message(message.from_user.id, "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

class PagesCallbackFactory(CallbackData, prefix="CategorY__"):
    page: str
    category_name: str


def get_pagination_keyboard(page: int = 0, category_list: any = None) -> InlineKeyboardBuilder:
    keyboard_builder = InlineKeyboardBuilder()
    has_next_page = len(category_list) > page + 1

    if page != 0:
        keyboard_builder.add(
            InlineKeyboardButton(
                text="üëà",
                callback_data=PagesCallbackFactory(page=page - 1,
                                                   category_name=f'{category_list[page - 1]["searchterm"]}')
            )
        )

    keyboard_builder.add(
        InlineKeyboardButton(
            text=f'–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑ "{str.capitalize(category_list[page]["searchterm"])}"',
            callback_data=f'category__{category_list[page]["searchterm"]}"'
        )
    )

    if has_next_page:
        keyboard_builder.add(
            InlineKeyboardButton(
                text="üëâ",
                callback_data=PagesCallbackFactory(page=page + 1,
                                                   category_name=f'{category_list[page + 1]["searchterm"]}')
            )
        )
    keyboard_builder.adjust(3)
    return keyboard_builder


def get_pagination_list(packs_count: int):
    res_list = list()
    count = packs_count % 50
    # print(count)
    last = 0
    if count > 0:
        for x in range(1, packs_count - 49, 50):
            last = x + 49
            res_list.append((x, last))
        res_list.append((last + 1, last + count))
    else:
        for x in range(1, packs_count, 50):
            last = x + 49
            res_list.append((x, last))
    return res_list


def func_chunk(lst, n):
    for x in range(0, len(lst), n):
        e_c = lst[x: n + x]

        if len(e_c) < n:
            e_c = e_c + ["" for y in range(n - len(e_c))]
        yield e_c
